import React, { useContext, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";

//Context
import { WorkoutContext } from "@contexts/WorkoutContext";

//Components
import AddExerciseSet from "@components/forms/AddExerciseSet";
import SetExerciseName from "@components/forms/SetExerciseName";
import CompletedSetsList from "@components/app/CompletedSetsList";
import Button from "@components/Button";

//Types
import { Exercise } from "@typescriptTypes/workoutTypes";

export default function Exercise() {
	const router = useRouter();
	const { workoutState, setWorkoutState } = useContext(WorkoutContext);

	const exerciseLength = workoutState.exercises.length;

	const [exerciseConstructor, setExerciseConstructor] = useState<Exercise>({
		name: "",
		exerciseId: "",
		volume: null,
		perceivedEffort: null,
		sets: [],
	});

	const calculateVolume = exerciseConstructor.sets.reduce(
		(accumulator, { weight, repetitions }) => accumulator + weight * repetitions,
		0
	);

	const pushToWorkout = (e: React.MouseEvent<HTMLButtonElement>) => {
		e.preventDefault();

		setWorkoutState((prevState: any) => ({
			...prevState,
			exercises: [
				...prevState.exercises,
				{
					name: exerciseConstructor.name,
					exerciseId: exerciseConstructor.name,
					perceivedEffort: null,
					sets: exerciseConstructor.sets,
					volume: calculateVolume,
				},
			],
		}));
		router.push("/workout");
	};

	const ensureData = exerciseConstructor.name === "" || exerciseConstructor.sets.length === 0;

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<h1>Exercise {exerciseLength + 1}</h1>
			<SetExerciseName setName={setExerciseConstructor} defaultName={exerciseConstructor.name} />
			<CompletedSetsList data={exerciseConstructor.sets} exerciseSets={setExerciseConstructor} />

			{exerciseConstructor.name && (
				<AddExerciseSet
					exerciseSetLength={exerciseConstructor.sets.length}
					exerciseSets={setExerciseConstructor}
				/>
			)}
			{!ensureData && (
				<Button onClick={pushToWorkout} fullw text={`finish ${exerciseConstructor.name}`} />
			)}
		</>
	);
}
