import React, { useContext, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";

//Context
import { WorkoutContext } from "@contexts/WorkoutContext";

//Components
import AddExerciseSet from "@components/forms/AddExerciseSet";
import SearchExercise from "@components/forms/SearchExercise";
import CompletedSetsList from "@components/app/CompletedSetsList";
import WrapperContainer from "@components/app/WrapperContainer";
import Heading from "@components/app/Heading";
import SlideButton from "@components/buttons/SlideButton";

//Types
import { Exercise } from "@typescriptTypes/workoutTypes";

//Constants
import { EXERCISELIST } from "@constants/Exercises";

export default function Exercise() {
	const router = useRouter();
	const { workoutState, setWorkoutState } = useContext(WorkoutContext);

	const exerciseLength = workoutState.exercises.length;

	const [exerciseConstructor, setExerciseConstructor] = useState<Exercise>({
		name: "",
		exerciseId: "",
		volume: null,
		perceivedEffort: null,
		sets: [],
	});

	const calculateVolume = exerciseConstructor.sets.reduce(
		(accumulator, { weight, repetitions }) => accumulator + weight * repetitions,
		0
	);

	const pushToWorkout = () => {
		setWorkoutState((prevState: any) => ({
			...prevState,
			exercises: [
				...prevState.exercises,
				{
					name: exerciseConstructor.name,
					exerciseId: exerciseConstructor.name,
					perceivedEffort: null,
					sets: exerciseConstructor.sets,
					volume: calculateVolume,
				},
			],
		}));
		router.push("/workout");
	};

	const handleClearName = (e: React.MouseEvent<HTMLButtonElement>) => {
		e.preventDefault();
		setExerciseConstructor((prevState: any) => ({
			...prevState,
			name: "",
		}));
	};

	console.log(exerciseConstructor);

	const hasExerciseName = exerciseConstructor.name !== "";
	const hasExerciseSets = exerciseConstructor.sets.length !== 0;
	const hasVolume = calculateVolume !== 0 && (
		<>
			<strong>vol</strong> {calculateVolume.toString()} kg
		</>
	);

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<WrapperContainer variant="overflow">
				<Heading
					variant="plain"
					onClick={handleClearName}
					text={hasExerciseName ? exerciseConstructor.name : "select exercise"}
					secondaryText={hasVolume}
				/>

				{hasExerciseName ? (
					<CompletedSetsList
						data={exerciseConstructor.sets}
						exerciseSets={setExerciseConstructor}
					/>
				) : (
					<SearchExercise
						possibleNames={EXERCISELIST}
						setName={setExerciseConstructor}
						defaultName={exerciseConstructor.name}
					/>
				)}
			</WrapperContainer>
			<WrapperContainer variant="pinned">
				{hasExerciseName && (
					<AddExerciseSet
						exerciseSetLength={exerciseConstructor.sets.length}
						exerciseSets={setExerciseConstructor}
					/>
				)}
				{hasExerciseSets && <SlideButton onDragEnd={pushToWorkout} text="finish" />}
			</WrapperContainer>
		</>
	);
}
