import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import Link from "next/link";
import { AnimatePresence } from "framer-motion";

//Contexts
import { useWorkoutContext, initialWorkoutState } from "@contexts/WorkoutContextAlt";

//Types
import { Workout } from "@typescriptTypes/workoutTypes";
import { Hydrated } from "@typescriptTypes/miscTypes";

//Components
import SetWorkoutName from "@components/forms/SetWorkoutName";
import ExerciseList from "@components/data-display/ExerciseList";
import FancyButton from "@components/buttons/FancyButton";
import WrapperContainer from "@components/wrappers/WrapperContainer";
import Plus from "@components/icons/Plus";
import SlideButton from "@components/buttons/SlideButton";
import Dialog from "@components/Dialog";

import NoData from "@components/data-display/NoData";
import StartLifting from "@components/icons/StartLifting";

type Props = {
	isHydrated: Hydrated;
};

export default function Workout({ isHydrated }: Props) {
	const router = useRouter();

	const { workoutState, setWorkoutState } = useWorkoutContext();
	const [completedExercises, setCompletedExercises] = useState([]);

	const hasExercises = workoutState.exercises.length >= 1;
	const hasWorkoutName = workoutState.name !== null;

	const uploadWorkout = () => {
		if (hasWorkoutName) {
			setCompletedExercises((prevState: any) => ({
				...prevState,
				workouts: [workoutState],
			}));

			setWorkoutState(initialWorkoutState);
			router.push("/");
		} else {
			console.log("no name given!");
		}
	};

	return (
		isHydrated && (
			<>
				<Head>
					<title>Create Next App</title>
					<meta name="description" content="Generated by create next app" />
					<meta name="viewport" content="width=device-width, initial-scale=1" />
					<link rel="icon" href="/favicon.ico" />
				</Head>
				<SetWorkoutName />

				<WrapperContainer variant="overflow">
					<ExerciseList />
				</WrapperContainer>

				<WrapperContainer variant="pinned">
					<AnimatePresence>
						{hasWorkoutName && (
							<Link key="ExerciseName" href="/exercise">
								<FancyButton icon={<Plus />} text="add" />
							</Link>
						)}

						{hasExercises && (
							<SlideButton
								key="SlideButton"
								onDragEnd={uploadWorkout}
								text="slide to end workout"
							/>
						)}
					</AnimatePresence>
				</WrapperContainer>
			</>
		)
	);
}
